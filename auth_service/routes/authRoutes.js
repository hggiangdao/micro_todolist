const express = require("express");
const User = require("../models/User");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
require("dotenv").config();

const router = express.Router();

// üîê ƒêƒÉng k√Ω
router.post("/register", async (req, res) => {
  const { email, password } = req.body;

  console.log("üì© [REGISTER] Email:", email);
  console.log("üîë [REGISTER] M·∫≠t kh·∫©u g·ªëc:", password);

  if (!email || !password) {
    return res.status(400).json({ success: false, message: "Email and password are required" });
  }

  try {
    // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i
    const userExists = await User.findOne({ email });
    if (userExists) {
      console.log("‚ö†Ô∏è [REGISTER] User ƒë√£ t·ªìn t·∫°i!");
      return res.status(400).json({ success: false, message: "User already exists" });
    }

    // T·∫°o user m·ªõi
    const user = new User({ email, password });
    await user.save();

    console.log("‚úÖ [REGISTER SUCCESS] userId:", user.userId);

    res.status(201).json({
      success: true,
      message: "User registered successfully",
      user: { userId: user.userId, email: user.email },
    });
  } catch (error) {
    console.error("‚ùå [REGISTER ERROR]:", error);
    res.status(500).json({ success: false, message: "Server error", error });
  }
});

// üîê ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  console.log("üì© [LOGIN] Email:", email);
  console.log("üîë [LOGIN] M·∫≠t kh·∫©u nh·∫≠p v√†o:", password);

  if (!email || !password) {
    return res.status(400).json({ success: false, message: "Email and password are required" });
  }

  try {
    const user = await User.findOne({ email });

    if (!user) {
      console.log("‚ùå [LOGIN FAILED] Kh√¥ng t√¨m th·∫•y user!");
      return res.status(401).json({ success: false, message: "Invalid email or password" });
    }

    const isMatch = await user.matchPassword(password);

    if (!isMatch) {
      console.log("‚ùå [LOGIN FAILED] M·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
      return res.status(401).json({ success: false, message: "Invalid email or password" });
    }

    // T·∫°o token ch·ª©a userId
    const token = jwt.sign(
      { userId: user.userId, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    console.log("‚úÖ [LOGIN SUCCESS] Token:", token);

    res.status(200).json({
      success: true,
      message: "Login successful",
      token,
      user: { userId: user.userId, email: user.email },
    });
  } catch (error) {
    console.error("‚ùå [LOGIN ERROR]:", error);
    res.status(500).json({ success: false, message: "Server error", error });
  }
});

module.exports = router;
