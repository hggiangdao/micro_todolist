const Task = require("../models/Task");
const fs = require("fs");
const mongoose = require("mongoose");  // Th√™m d√≤ng n√†y
const { ObjectId } = require("mongoose").Types;



// H√†m ghi log v√†o file
const logRequest = (message) => {
  fs.appendFileSync("logs/requests.log", `${new Date().toISOString()} - ${message}\n`);
};
// L·∫•y danh s√°ch t·∫•t c·∫£ c√°c tasks c·ªßa m·ªôt user
const getTasks = async (req, res) => {
  try {
    const userId = req.query.userId;

    if (!ObjectId.isValid(userId)) {
      return res.status(400).json({ message: "Invalid userId" });
    }

    const tasks = await Task.find({ userId: new ObjectId(userId) }).exec();

    return res.status(200).json(tasks);
  } catch (err) {
    console.error(err);
    return res.status(500).json({ message: "Server error" });
  }
};





// T·∫°o Task m·ªõi
// T·∫°o Task m·ªõi
exports.createTask = async (req, res) => {
  const { title, description, category, deadline, userId } = req.body;

  if (!title || !description || !userId) {
    return res.status(400).json({ success: false, message: "Title, Description v√† UserId l√† b·∫Øt bu·ªôc" });
  }

  try {
    const task = new Task({
      title,
      description,
      category,
      deadline,
      userId,  // Kh√¥ng c·∫ßn ki·ªÉm tra v·ªõi b·∫£ng User
    });

    await task.save();

    res.status(201).json({
      success: true,
      message: "Task created!",
      task,
    });
  } catch (error) {
    console.error(error); // In l·ªói chi ti·∫øt ra console ƒë·ªÉ debug
    res.status(500).json({ success: false, message: "L·ªói khi t·∫°o task" });
  }
};


// C·∫≠p nh·∫≠t Task
exports.updateTask = async (req, res) => {
  const { id } = req.params;
  const { title, description, category, deadline } = req.body; // üëà Th√™m deadline

  logRequest(`[PUT] /api/tasks/${id} - Updating Task`);

  try {
    const task = await Task.findById(id);
    if (!task) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y Task" });
    }

    if (task.userId.toString() !== req.user.id) {
      return res.status(403).json({ success: false, message: "Kh√¥ng c√≥ quy·ªÅn s·ª≠a task n√†y" });
    }

    task.title = title || task.title;
    task.description = description || task.description;
    task.category = category || task.category;
    task.deadline = deadline || task.deadline; // üëà C·∫≠p nh·∫≠t deadline n·∫øu c√≥

    await task.save();

    res.json({
      success: true,
      message: "Task c·∫≠p nh·∫≠t th√†nh c√¥ng",
      task,
    });
  } catch (error) {
    logRequest(`[ERROR] /api/tasks/${id} - ${error.message} - Stack: ${error.stack}`);
    res.status(500).json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t task" });
  }
};

exports.deleteTask = async (req, res) => {
  const { id } = req.params; // L·∫•y ID c·ªßa task t·ª´ URL

  try {
    // T√¨m v√† x√≥a task theo ID
    const task = await Task.findByIdAndDelete(id);

    // N·∫øu kh√¥ng t√¨m th·∫•y task
    if (!task) {
      return res.status(404).json({ success: false, message: "Task not found" });
    }

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
    res.json({
      success: true,
      message: "Task deleted successfully",
    });
  } catch (error) {
    console.error(`[ERROR] ${error.message}`);
    res.status(500).json({ success: false, message: "Error deleting task" });
  }
};
